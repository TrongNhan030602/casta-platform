<?php

namespace App\Models;

use App\Enums\ProductTag;
use App\Enums\FeedbackType;
use App\Enums\ShippingType;
use App\Enums\ProductStatus;
use App\Enums\FeedbackStatus;
use App\Enums\ProductStockLogType;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class Product extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'products';

    protected $fillable = [
        'enterprise_id', // Doanh nghi·ªáp s·ªü h·ªØu s·∫£n ph·∫©m
        'category_id',   // Danh m·ª•c s·∫£n ph·∫©m
        'name',          // T√™n s·∫£n ph·∫©m
        'description',   // M√¥ t·∫£ chi ti·∫øt
        'price',         // Gi√° g·ªëc
        'stock',         // üü° T·ªìn kho hi·ªán t·∫°i (s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c√≥ s·∫µn)

        'status',            // Tr·∫°ng th√°i ki·ªÉm duy·ªát (pending, published, rejected)
        'reason_rejected',   // L√Ω do b·ªã t·ª´ ch·ªëi (n·∫øu c√≥)
        'approved_by',       // ID ng∆∞·ªùi duy·ªát
        'approved_at',       // Th·ªùi ƒëi·ªÉm ƒë∆∞·ª£c duy·ªát

        // ‚úÖ Thu·ªôc t√≠nh th∆∞∆°ng m·∫°i h√≥a (b·ªï sung t√≠nh nƒÉng n√¢ng cao cho s·∫£n ph·∫©m)
        'discount_price',      // üîª Gi√° khuy·∫øn m√£i (n·∫øu c√≥)
        'discount_start_at',   // B·∫Øt ƒë·∫ßu √°p d·ª•ng gi·∫£m gi√°
        'discount_end_at',     // K·∫øt th√∫c gi·∫£m gi√°

        'weight',         // ‚öñÔ∏è Kh·ªëi l∆∞·ª£ng (ƒë∆°n v·ªã t√πy theo h·ªá th·ªëng)
        'dimensions',     // üì¶ K√≠ch th∆∞·ªõc ƒë√≥ng g√≥i (VD: {width, height, depth} d·∫°ng JSON)
        'shipping_type',  // üì¨ H√¨nh th·ª©c v·∫≠n chuy·ªÉn (enum: fixed, calculated, pickup)

        'views_count',     // üëÄ S·ªë l∆∞·ª£t xem s·∫£n ph·∫©m
        'purchased_count', // üõí T·ªïng s·ªë l∆∞·ª£t ƒë√£ mua
        'reviews_count',   // ‚≠ê T·ªïng s·ªë ƒë√°nh gi√°
        'average_rating',  // üåü ƒêi·ªÉm trung b√¨nh ƒë√°nh gi√° (VD: 4.3)

        'model_3d_url',    // üß± Link m√¥ h√¨nh 3D n·∫øu c√≥
        'video_url',       // üé¨ Video gi·ªõi thi·ªáu s·∫£n ph·∫©m
        'tags',            // üè∑Ô∏è m·ªõi, hot 
    ];


    protected $casts = [
        'status' => ProductStatus::class,
        'approved_at' => 'datetime',
        'price' => 'decimal:2',
        'stock' => 'integer',

        // ‚úÖ Cast b·ªï sung
        'discount_price' => 'decimal:2',
        'discount_start_at' => 'datetime',
        'discount_end_at' => 'datetime',
        'weight' => 'decimal:2',
        'dimensions' => 'array',
        'shipping_type' => ShippingType::class,
        'views_count' => 'integer',
        'purchased_count' => 'integer',
        'reviews_count' => 'integer',
        'average_rating' => 'decimal:1',
        'tags' => 'array',
    ];
    protected static function boot()
    {
        parent::boot();

        static::creating(function ($product) {
            if (is_null($product->stock)) {
                $product->stock = 0;
            }
        });
    }
    public function getTagEnumsAttribute(): array
    {
        return collect($this->tags)
            ->map(fn($tag) => ProductTag::tryFrom($tag)) // Chuy·ªÉn th√†nh enum (n·∫øu h·ª£p l·ªá)
            ->filter() // B·ªè null n·∫øu kh√¥ng match enum
            ->values() // Reset index
            ->all(); // Tr·∫£ v·ªÅ m·∫£ng th∆∞·ªùng
    }

    // -------------------- RELATIONS --------------------
    public function images(): HasMany
    {
        return $this->hasMany(ProductImage::class);
    }

    public function enterprise(): BelongsTo
    {
        return $this->belongsTo(Enterprise::class);
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function approver(): BelongsTo
    {
        return $this->belongsTo(User::class, 'approved_by');
    }

    public function spaceProducts(): HasMany
    {
        return $this->hasMany(ExhibitionSpaceProduct::class);
    }



    public function stockLogs(): HasMany
    {
        return $this->hasMany(ProductStockLog::class);
    }

    public function feedbacks(): HasMany
    {
        return $this->hasMany(Feedback::class, 'target_id')
            ->where('type', FeedbackType::PRODUCT)
            ->whereIn('status', [
                FeedbackStatus::REVIEWED,
                FeedbackStatus::RESOLVED,
            ]);
    }



    /**
     * C·∫≠p nh·∫≠t l·∫°i t·ªìn kho d·ª±a tr√™n c√°c log nh·∫≠p/xu·∫•t
     */
    public function recalculateStock(): void
    {
        $import = $this->stockLogs()
            ->whereIn('type', ProductStockLogType::casesFor(fn($type) => $type->isImport()))
            ->sum('quantity');

        $export = $this->stockLogs()
            ->whereIn('type', ProductStockLogType::casesFor(fn($type) => $type->isExport()))
            ->sum('quantity');

        $this->stock = max(0, $import - $export);
        $this->save();
    }

    public function updateRatingStats(): void
    {
        $query = $this->feedbacks();

        $avg = $query->avg('rating');
        $this->reviews_count = $query->count();
        $this->average_rating = is_null($avg) ? null : round($avg, 1);

        $this->save();
    }

    public function increaseViews(): void
    {
        $key = 'product_viewed_' . $this->id . '_' . request()->ip();
        if (!cache()->has($key)) {
            $this->increment('views_count');
            cache()->put($key, true, now()->addMinutes(10)); // Ch·ªëng spam trong 10 ph√∫t
        }
    }


}